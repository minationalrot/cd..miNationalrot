name: $(TeamProject)_$(BuildDefinitionName)_$(SourceBranchName)_$(Date:yy).$(Date:MMdd)$(Rev:.r)
variables:
  SolutionFile: miNationalrot.sln
  BuildConfiguration: Release
  VersionPrefix: '0'
  BuildYear: $[format('{0:yy}', pipeline.startTime)]
  BuildDate: $[format('{0:MMdd}', pipeline.startTime)]
  Revision: 0
  Version: '0.0.0.0'
      
stages:
- stage: Build    
  jobs:
  - job: Build
    pool:
      #name: Hosted Windows 2019 with VS2019
      name: Default

    steps:
    - powershell: |
        $buildNumber = $Env:BUILD_BUILDNUMBER
        $revision=$buildNumber.Substring($buildNumber.LastIndexOf('.') + 1)
        $version='{0}.{1}.{2}.{3}' -f $(VersionPrefix) , $(BuildYear) , $(BuildDate), $(Revision)
        Write-Host "##vso[task.setvariable variable=Revision;]$revision"
        Write-Host "##vso[task.setvariable variable=Version;]$version"
        
    - task: UseDotNet@2
      displayName: 'Use .NET Core sdk 3.0.100-preview6-012264'
      inputs:
        version: 3.0.100-preview6-012264

    - task: DotNetCoreCLI@2
      displayName: Restore
      inputs:
        command: restore
        projects: '$(SolutionFile)'

    - task: DotNetCoreCLI@2
      displayName: Build
      inputs:
        projects: '$(SolutionFile)'
        #arguments: '--configuration $(BuildConfiguration) /p:Version=$(VersionPrefix).$(BuildDate).$(Revision)'
        #arguments: '--configuration $(BuildConfiguration) /p:Version=$(VersionPrefix).$(BuildYear).$(BuildDate).$(Revision)'
        arguments: '--configuration $(BuildConfiguration) /p:Version=$(Version)'

    - task: DotNetCoreCLI@2
      displayName: Test
      inputs:
        command: test
        projects: '$(Parameters.TestProjects)'
        arguments: '--configuration $(BuildConfiguration)'


    - task: DotNetCoreCLI@2
      displayName: Publish
      inputs:
        command: publish
        publishWebProjects: True
        arguments: '--configuration $(BuildConfiguration) --output $(build.artifactstagingdirectory) --no-build'

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact'
      inputs:
        PathtoPublish: '$(build.artifactstagingdirectory)'
        artifactName: 'drop' 

- stage: Deploy
  jobs:
   - job: Deploy
     pool:
      #name: Hosted Windows 2019 with VS2019
      name: Default

     steps:

      - task: DownloadBuildArtifacts@0
        displayName: Download Build Artifacts to '$(System.ArtifactsDirectory)'
        inputs:
          artifactName: 'drop'
          downloadPath: '$(System.ArtifactsDirectory)' 

      - task: ExtractFiles@1
        displayName: 'Extract files'
        inputs:
          archiveFilePatterns: '$(System.ArtifactsDirectory)\*.zip' 
          destinationFolder: '$(build.artifactstagingdirectory)\disttmp'
      
      - checkout: self
        persistCredentials: 'true'
        
      - script: |
          git checkout gh-pages
          git rm . -r
          xcopy $(build.artifactstagingdirectory)\disttmp\minationalrot\dist $(System.DefaultWorkingDirectory)\ /s
          git add .
          git commit -m "Push force azure-deploy ***NO_CI*** $(CURRENT_VERSION)"
          echo git remote add...
          echo Version '$(Version)'
          git push --force origin gh-pages
          git commit -m 'rebuild pages' --allow-empty
          git push origin gh-pages
        displayName: 'run git push gh-pages'
        env:
          CURRENT_VERSION: $(Version)

      - powershell: |
          $url="https://api.github.com/repos/miNationalrot/miNationalrot/pages/builds"
          $headers = @{}
          $headers.Add("Authorization" , "Bearer $(github_pat)")
          $headers.Add("Accept" , "application/vnd.github.mister-fantastic-preview+json" )
          $method="POST"
          $output = Invoke-RestMethod $url -Method $method -Headers $headers -ContentType "application/json" -Verbose
          Write-Host $output
        displayName: 'rebuild gh-pages'


