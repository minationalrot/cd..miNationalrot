name: $(TeamProject)_$(BuildDefinitionName)_$(SourceBranchName)_$(Date:yy).$(Date:MMdd)$(Rev:.r)
variables:
  SolutionFile: miNationalrot.sln
  BuildConfiguration: Release
  VersionPrefix: '0'
  BuildYear: $[format('{0:yy}', pipeline.startTime)]
  BuildDate: $[format('{0:MMdd}', pipeline.startTime)]
  Revision: 0
  Version: '0.0.0.0'
  Token: $(System.AccessToken)
  Token2: 'Testy'
  
      
stages:
- stage: Build    
  jobs:
  - job: Build
    pool:
      #name: Hosted Windows 2019 with VS2019
      name: Default

    steps:
    - powershell: |
        $buildNumber = $Env:BUILD_BUILDNUMBER
        $revision=$buildNumber.Substring($buildNumber.LastIndexOf('.') + 1)
        $version='{0}.{1}.{2}.{3}' -f $(VersionPrefix) , $(BuildYear) , $(BuildDate), $(Revision)
        Write-Host "##vso[task.setvariable variable=Revision;]$revision"
        Write-Host "##vso[task.setvariable variable=Version;]$version"
        
    - task: UseDotNet@2
      displayName: 'Use .NET Core sdk 3.0.100-preview6-012264'
      inputs:
        version: 3.0.100-preview6-012264

    - task: DotNetCoreCLI@2
      displayName: Restore
      inputs:
        command: restore
        projects: '$(SolutionFile)'

    - task: DotNetCoreCLI@2
      displayName: Build
      inputs:
        projects: '$(SolutionFile)'
        #arguments: '--configuration $(BuildConfiguration) /p:Version=$(VersionPrefix).$(BuildDate).$(Revision)'
        #arguments: '--configuration $(BuildConfiguration) /p:Version=$(VersionPrefix).$(BuildYear).$(BuildDate).$(Revision)'
        arguments: '--configuration $(BuildConfiguration) /p:Version=$(Version)'

    - task: DotNetCoreCLI@2
      displayName: Test
      inputs:
        command: test
        projects: '$(Parameters.TestProjects)'
        arguments: '--configuration $(BuildConfiguration)'


    - task: DotNetCoreCLI@2
      displayName: Publish
      inputs:
        command: publish
        publishWebProjects: True
        arguments: '--configuration $(BuildConfiguration) --output $(build.artifactstagingdirectory) --no-build'

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact'
      inputs:
        PathtoPublish: '$(build.artifactstagingdirectory)'
        artifactName: 'drop' 

- stage: Deploy
  jobs:
   - job: Deploy
     pool:
      #name: Hosted Windows 2019 with VS2019
      name: Default

     steps:

      - task: DownloadBuildArtifacts@0
        displayName: Download Build Artifacts to '$(System.ArtifactsDirectory)'
        inputs:
          artifactName: 'drop'
          downloadPath: '$(System.ArtifactsDirectory)' 

      - task: ExtractFiles@1
        displayName: 'Extract files'
        inputs:
          archiveFilePatterns: '$(System.ArtifactsDirectory)\*.zip' 
          destinationFolder: '$(build.artifactstagingdirectory)\disttmp'
      
      - checkout: self
        clean: true
        persistCredentials: 'true'
        
      - powershell: |
          $token = $Env:Token
          Write-Host "SYSTEM-TOKEN as Makrois -- $(System.AccessToken)"
          Write-Host "MY_SYSTEM-TOKEN is -- $env:MY_SYSTEM_ACCESSTOKEN --"
          Write-Host "TOKEN is -- $env:Token --"
          Write-Host "TOKEN3 is -- $Env:TOKEN3" 
          $url="https://api.github.com/repos/miNationalrot/miNationalrot/pages/builds"
          $headers = @{} #New-Object "System.Collections.Generic.Dictionary[[String],[String]]"
          $headers.Add("Authorization" , "Bearer $env:SYSTEM_ACCESSTOKEN")
          $headers.Add("Accept" , "application/vnd.github.mister-fantastic-preview+json" )
          Write-Host $headers

          $method="POST"
          #$output = Invoke-RestMethod $url -Method "POST" -Headers ${ "Accept" = 'application/vnd.github.mister-fantastic-preview+json' ; "Authorization" = 'Bearer $env:SYSTEM_ACCESSTOKEN' } -ContentType "application/json" -Verbose
          $output = Invoke-RestMethod $url -Method $method -Headers $headers -ContentType "application/json" -Verbose
          Write-Host $output
          env:
            MY_SYSTEM_ACCESSTOKEN: $(System.AccessToken)

      - powershell: |
          $url = "$($env:SYSTEM_TEAMFOUNDATIONCOLLECTIONURI)$env:SYSTEM_TEAMPROJECTID/_apis/build/definitions/$($env:SYSTEM_DEFINITIONID)?api-version=2.0"
          Write-Host "URL:" $url
          $definition = Invoke-RestMethod -Uri $url -Headers @{ Authorization = "Bearer $env:SYSTEM_ACCESSTOKEN" }
          Write-Host "Pipeline = $($definition | ConvertTo-Json -Depth 100)"
        env:
          SYSTEM_ACCESSTOKEN: $(system.accesstoken)

      - script: |
          git checkout gh-pages
          git rm . -r
          xcopy $(build.artifactstagingdirectory)\disttmp\minationalrot\dist $(System.DefaultWorkingDirectory)\ /s
          git add .
          git commit -m "Push force azure-deploy ***NO_CI*** $(Version)"
          echo git remote add...
          echo Version '$(Version)'
          git push --force origin gh-pages
          git commit -m 'rebuild pages' --allow-empty
          git push origin gh-pages
        displayName: 'run git gh-pages'
      
      - powershell: |
          $token = $Env:Token
          Write-Host "SYSTEM-TOKEN as Makrois -- $(System.AccessToken)"
          Write-Host "MY_SYSTEM-TOKEN is -- $env:MY_SYSTEM_ACCESSTOKEN --"
          Write-Host "TOKEN is -- $env:Token --"
          Write-Host "TOKEN3 is -- $Env:TOKEN3" 
          #if (!(Get-VstsTaskVariable -Name "System.AccessToken")) {
          #    throw ("OAuth token by VSTS not found. Make sure to have 'Allow Scripts to Access OAuth Token' enabled in the build definition.                 Also, give 'Project Collection Build Service' 'Contribute' and 'Create Tag' permissions - Cog -> Version Control -> {Select Repository/ies}")
          #}
          #if (!($env:SYSTEM_ACCESSTOKEN )) {
          #    throw ("OAuth token not found. Make sure to have 'Allow Scripts to Access OAuth Token' enabled in the build definition. Also, give 'Project Collection Build Service' 'Contribute' and 'Create Tag' permissions - Cog -> Version Control -> {Select Repository/ies}")
          #}
          $url="https://api.github.com/repos/miNationalrot/miNationalrot/pages/builds"
          $headers = @{} #New-Object "System.Collections.Generic.Dictionary[[String],[String]]"
          $headers.Add("Authorization" , "Bearer $env:SYSTEM_ACCESSTOKEN")
          $headers.Add("Accept" , "application/vnd.github.mister-fantastic-preview+json" )
          Write-Host $headers

          $method="POST"
          #$output = Invoke-RestMethod $url -Method "POST" -Headers ${ "Accept" = 'application/vnd.github.mister-fantastic-preview+json' ; "Authorization" = 'Bearer $env:SYSTEM_ACCESSTOKEN' } -ContentType "application/json" -Verbose
          $output = Invoke-RestMethod $url -Method $method -Headers $headers -ContentType "application/json" -Verbose
          Write-Host $output
          env:
            MY_SYSTEM_ACCESSTOKEN: $(System.AccessToken)

      #- task: InvokeRESTAPI@1
      #  inputs:
      #    connectionType: 'connectedServiceName' # Options: connectedServiceName, connectedServiceNameARM
      #    serviceConnection: 'miNationalrot-dev-as - GitHub'# Required when connectionType == ConnectedServiceName
      #    #azureServiceConnection: # Required when connectionType == ConnectedServiceNameARM
      #    method: 'POST' # Options: OPTIONS, GET, HEAD, POST, PUT, DELETE, TRACE, PATCH
      #    headers: '{Accept:application/vnd.github.mister-fantastic-preview+json,  AuthToken: $(system.AccessToken)}' #, PlanUrl: $(system.CollectionUri), ProjectId: $(system.TeamProjectId), HubName: $(system.HostType), PlanId: $(system.PlanId), JobId: $(system.JobId), TimelineId: $(system.TimelineId), TaskInstanceId: $(system.TaskInstanceId), AuthToken: $(system.AccessToken)}' 
      #    #body: # Required when method != GET && Method != HEAD
      #    urlSuffix: 'https://api.github.com/repos/miNationalrot/miNationalrot/pages/builds'
      #    waitForCompletion: 'true' # Options: true, false
      #    #successCriteria: # Optional